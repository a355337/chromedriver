# This is a basic workflow to help you get started with Actions

name: Chrome and Edge Driver Download...

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: donwload driver
        run: |
          version=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
          echo $version
          echo "artifactPath=chromedriver$version.zip" >> $GITHUB_ENV
          echo "artifactName=Chrome Driver Win32 v$version" >> $GITHUB_ENV
          wget "https://chromedriver.storage.googleapis.com/$version/chromedriver_win32.zip" -O "chromedriver$version.zip"
          
          version_big=$(echo $version | grep -o -E '^[0-9]+')
          echo "version_big $version_big"
          version_1=$(($version_big-1))
          echo $version_1
          version_1_detail=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version_1)
          echo $version_1_detail
          echo "artifactPath1=chromedriver$version_1_detail.zip" >> $GITHUB_ENV
          echo "artifactName1=Chrome Driver Win32 v$version_1_detail" >> $GITHUB_ENV
          wget "https://chromedriver.storage.googleapis.com/$version_1_detail/chromedriver_win32.zip" -O "chromedriver$version_1_detail.zip"
          
          version_2=$(($version_big-2))
          echo $version_2
          version_2_detail=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version_2)
          echo $version_2_detail
          echo "artifactPath2=chromedriver$version_2_detail.zip" >> $GITHUB_ENV
          echo "artifactName2=Chrome Driver Win32 v$version_2_detail" >> $GITHUB_ENV
          wget "https://chromedriver.storage.googleapis.com/$version_2_detail/chromedriver_win32.zip" -O "chromedriver$version_2_detail.zip"
          
          version_3=$(($version_big-3))
          echo $version_3
          version_3_detail=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version_3)
          echo $version_3_detail
          echo "artifactPath3=chromedriver$version_3_detail.zip" >> $GITHUB_ENV
          echo "artifactName3=Chrome Driver Win32 v$version_3_detail" >> $GITHUB_ENV
          wget "https://chromedriver.storage.googleapis.com/$version_3_detail/chromedriver_win32.zip" -O "chromedriver$version_3_detail.zip"
          
          version_lastest=$(($version_big+1))
          echo $version_lastest
          version_lastest_detail=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version_lastest)
          echo $version_lastest_detail
          echo "artifactPathLastes=chromedriver$version_lastest_detail.zip" >> $GITHUB_ENV
          echo "artifactNameLastes=Chrome Driver Win32 v$version_lastest_detail" >> $GITHUB_ENV
          wget "https://chromedriver.storage.googleapis.com/$version_3_detail/chromedriver_win32.zip" -O "chromedriver$version_lastest_detail.zip"

          curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE --output LATEST_CANARY
          version=$(echo `cat LATEST_CANARY` | grep -Eo '[0-9]+.[0-9]+.[0-9]+.[0-9]+')
          version_big=$(echo $version | grep -o -E '^[0-9]+')
          echo $version
          echo $version_big
          wget $(echo "https://msedgedriver.azureedge.net/${version}/edgedriver_win64.zip"| tr -d '\r') -O "edgedriver_win64_v${version}.zip"
          echo "artifactEdgePath=edgedriver_win64_v${version}.zip" >> $GITHUB_ENV
          echo "artifactEdgeName=Edge Driver Win64 v${version}" >> $GITHUB_ENV
          
          version_1=$(($version_big-1))
          echo $version_1
          curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_RELEASE_${version_1}_WINDOWS --output "version.txt"
          version_1_detail=$(echo `cat version.txt` | grep -Eo '[0-9]+.[0-9]+.[0-9]+.[0-9]+')
          echo $version_1_detail
          wget $(echo "https://msedgedriver.azureedge.net/${version_1_detail}/edgedriver_win64.zip") -O "edgedriver_win64_v${version_1_detail}.zip"
          echo "artifactEdgePath1=edgedriver_win64_v${version_1_detail}.zip" >> $GITHUB_ENV
          echo "artifactEdgeName1=Edge Driver Win64 v${version_1_detail}" >> $GITHUB_ENV
          
          
          version_1=$(($version_big-1))
          echo $version_1
          curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_RELEASE_${version_1}_WINDOWS --output "version.txt"
          version_1_detail=$(echo `cat version.txt` | grep -Eo '[0-9]+.[0-9]+.[0-9]+.[0-9]+')
          echo $version_1_detail
          wget $(echo "https://msedgedriver.azureedge.net/${version_1_detail}/edgedriver_win64.zip") -O "edgedriver_win64_v${version_1_detail}.zip"
          echo "artifactEdgePath1=edgedriver_win64_v${version_1_detail}.zip" >> $GITHUB_ENV
          echo "artifactEdgeName1=Edge Driver Win64 v${version_1_detail}" >> $GITHUB_ENV
          
          version_2=$(($version_big-2))
          echo $version_2
          curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_RELEASE_${version_2}_WINDOWS --output "version.txt"
          version_2_detail=$(echo `cat version.txt` | grep -Eo '[0-9]+.[0-9]+.[0-9]+.[0-9]+')
          echo $version_2_detail
          wget $(echo "https://msedgedriver.azureedge.net/${version_2_detail}/edgedriver_win64.zip") -O "edgedriver_win64_v${version_2_detail}.zip"
          echo "artifactEdgePath2=edgedriver_win64_v${version_2_detail}.zip" >> $GITHUB_ENV
          echo "artifactEdgeName2=Edge Driver Win64 v${version_2_detail}" >> $GITHUB_ENV
          
          version_3=$(($version_big-3))
          echo $version_3
          curl https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_RELEASE_${version_3}_WINDOWS --output "version.txt"
          version_3_detail=$(echo `cat version.txt` | grep -Eo '[0-9]+.[0-9]+.[0-9]+.[0-9]+')
          echo $version_3_detail
          wget $(echo "https://msedgedriver.azureedge.net/${version_3_detail}/edgedriver_win64.zip") -O "edgedriver_win64_v${version_3_detail}.zip"
          echo "artifactEdgePath3=edgedriver_win64_v${version_3_detail}.zip" >> $GITHUB_ENV
          echo "artifactEdgeName3=Edge Driver Win64 v${version_3_detail}" >> $GITHUB_ENV
#      - name: my-artifact
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactName }}
          path: ${{ env.artifactPath }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactName1 }}
          path: ${{ env.artifactPath1 }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactName2 }}
          path: ${{ env.artifactPath2 }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactName3 }}
          path: ${{ env.artifactPath3 }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactPathLastes }}
          path: ${{ env.artifactNameLastes }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactEdgeName }}
          path: ${{ env.artifactEdgePath }}      
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactEdgeName1 }}
          path: ${{ env.artifactEdgePath1 }}
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactEdgeName2 }}
          path: ${{ env.artifactEdgePath2 }}      
          
      - uses: actions/upload-artifact@v3
        with: 
          name: ${{ env.artifactEdgeName3 }}
          path: ${{ env.artifactEdgePath3 }}  
          
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
